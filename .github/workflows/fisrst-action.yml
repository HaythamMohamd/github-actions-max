# ============================= 01- First workflow   ==========================================

# name: First Workflow
# on: workflow_dispatch
# jobs:
#   first-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Print greeting
#         run: echo "Hello World!"
#       - name: Print goodbye
#         run: echo "Done - bye!"

# ============================= 02- First workflow with multi line   ==========================================

# name: First Workflow
# on: workflow_dispatch
# jobs:
#   first-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Print greeting
#         run: |
# 		  echo "Hello World!"
# 		  echo "Hello World 2 "
#       - name: Print goodbye
#         run: echo "Done - bye!"

# ============================= 03- React js app test on push  ==========================================

# name: 03- React js app test on push 
# on: push
# jobs:
#   first-job:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4
#       - name: Install dependecies 
#         run: npm ci
#       - name: Run tests
#         run: npm test

# ============================= 04- broke tests   ==========================================
# name: 04- broke tests    
# on: push
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4
#       - name: Install dependecies 
#         run: npm ci
#       - name: Run tests
#         run: npm test

# to broke test 

# src/components/MainContent.test.jsx:19:49

# import '@testing-library/jest-dom';
# import { render, screen } from '@testing-library/react';
# import userEvent from '@testing-library/user-event';

# import MainContent from './MainContent';

# describe('MainContent', () => {
#   it('should render a button', () => {
#     render(<MainContent />);

#     expect(screen.getByRole('button')).toBeInTheDocument();
#   });

#   it('should show the help area after clicking the button', async () => {
#     render(<MainContent />);

#     const button = screen.getByRole('button');
#     await userEvent.click(button);
#     expect(screen.getByTestId('help-area')).not.toBeInTheDocument();  // added not.
#   });
# });

# #============================= 05- deployment job   ==========================================
# name: 05- deployment job    

# on: 
#   push:

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4

#       - name: Install NodeJS
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies 
#         run: npm ci

#       - name: Run tests
#         run: npm test

#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4

#       - name: Install NodeJS
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies 
#         run: npm ci

#       - name: Run tests
#         run: npm test

#       - name: Build project
#         run: npm run build

#       - name: Deploy
#         run: echo "Deploying ... "

# # ============================= 06- test and deployment jobs  both of them will run sequence using need  ==========================================
# name: 06- test and deployment jobs  both of them will run sequence using need

# on: 
#   push:

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4

#       - name: Install NodeJS
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies 
#         run: npm ci

#       - name: Run tests
#         run: npm test

#   deploy:
#     needs: test # ensure test passes before deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4

#       - name: Install NodeJS
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies 
#         run: npm ci

#       - name: Run tests
#         run: npm test

#       - name: Build project
#         run: npm run build

#       - name: Deploy
#         run: echo "Deploying ... "

# # ============================= 07- Using multiple triggers  ==========================================
# name: 07- Using multiple triggers

# on: [push, workflow_dispatch]

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4

#       - name: Install NodeJS
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies 
#         run: npm ci

#       - name: Run tests
#         run: npm test

#   deploy:
#     needs: test # ensure test passes before deploy
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code 
#         uses: actions/checkout@v4

#       - name: Install NodeJS
#         uses: actions/setup-node@v3
#         with:
#           node-version: 18

#       - name: Install dependencies 
#         run: npm ci

#       - name: Run tests
#         run: npm test

#       - name: Build project
#         run: npm run build

#       - name: Deploy
#         run: echo "Deploying ... "

# # ============================= 08- Expressions and context object  ==========================================
# name: 08- Output info

# on:  workflow_dispatch

# jobs:
#   info:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Output Github context
#         run: echo "${{ toJSON(github) }}"


#============================= 10- excersis 1  ==========================================
# name: Deployment Exercise 1
# on: push
# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Lint
#         run: npm run lint
#       - name: Test code
#         run: npm run test
#       - name: Build code
#         run: npm run build
#       - name: Deploy code
#         run: echo "Deploying..."

# name: Deployment Exercise 2
# on: push
# jobs:
#   lint:
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Lint
#         run: npm run lint
#   test:
#     needs: lint
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Test code
#         run: npm run test
#   deploy:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Build code
#         run: npm run build
#       - name: Deploy code
#         run: echo "Deploying..."

# name: Handle issues
# on: issues
# jobs:
#   output-info:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Output event details
#         run: echo "${{ toJSON(github.event) }}"

# # ============================= 12- Using activity types  ==========================================		

# name: Events demo 1

# on: 
#   pull_request:
#     types:
#       - opened
#   workflow_dispatch:

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Output event data 
#         run: echo "${{ toJSON(github.event) }}"
      
#       - name: Get code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: npm ci

#       - name: Test code
#         run: npm run test

#       - name: Build code
#         run: npm run build

#       - name: Deploy code
#         run: echo "Deploying..."

        
# # ============================= 13- Using filters  ==========================================		

# name: 13- Using filters on branch

# on: 
#   pull_request:
#     types:
#       - opened
#   workflow_dispatch:
#   push:
#     branches:
#         - main
#         - 'dev-*'
#         - 'feat/**'
#     # paths-ignore:
#     #     - '.github/workflow/*'

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#       - name: Output event data 
#         run: echo "${{ toJSON(github.event) }}"
      
#       - name: Get code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: npm ci

#       - name: Test code
#         run: npm run test

#       - name: Build code
#         run: npm run build

#       - name: Deploy code
#         run: echo "Deploying..."


# # # ============================= 14- skip workflow  ==========================================		

# at the commit 
# git add .
# git commit -m "added comment [skip ci] "
# git push

# ============================= 15- artifact uplaod  ==========================================		

# name: 15- Upload artifact
# on: push
# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Test code
#         run: npm run test
#   build:
#     needs: test
#     runs-on: ubuntu-latest
#     steps:
#       - name: Get code
#         uses: actions/checkout@v3
#       - name: Install dependencies
#         run: npm ci
#       - name: Build Website
#         run: npm run build
#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#             name: dist-files
#             path: |
#               dist
#               package.json

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Deploy
#         run: echo "Deploying ... "
# ============================= 17- outputs  ==========================================		

# name: 17- outputs 
# on: push

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Get code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: npm ci

#       - name: Test code
#         run: npm run test

#   build:
#     needs: test
#     runs-on: ubuntu-latest
#     outputs:
#       script-file: ${{ steps.publish.outputs.script-file }}
#     steps:
#       - name: Get code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: npm ci

#       - name: Build Website
#         run: npm run build

#       - name: Publish JS filename
#         id: publish
#         run: echo "script-file=$(find dist/assets/*.js -type f | head -n 1)" >> $GITHUB_OUTPUT
#         #run: find dist/assets/*.js -type f -execdir echo 'script-file{}' >> $GITHUB_OUTPUT ';'
#         #run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}'  ';'

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: dist-files
#           path: |
#             dist
#             package.json

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: dist-files
#           path: dist

#       - name: Output contents
#         run: ls

#       - name: Deploy
#         run: echo "Deploying ... "

       
# ============================= 18- Using job output in another job  ==========================================		
# name: 18- Using job output in another job
# on: push

# jobs:
#   test:
#     runs-on: ubuntu-latest
#     steps: 
#       - name: Get code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: npm ci

#       - name: Test code
#         run: npm run test

#   build:
#     needs: test
#     runs-on: ubuntu-latest
#     outputs:
#       script-file: ${{ steps.publish.outputs.script-file }}
#     steps:
#       - name: Get code
#         uses: actions/checkout@v3

#       - name: Install dependencies
#         run: npm ci

#       - name: Build Website
#         run: npm run build

#       - name: Publish JS filename
#         id: publish
#         run: echo "script-file=$(find dist/assets/*.js -type f | head -n 1)" >> $GITHUB_OUTPUT
#         #run: find dist/assets/*.js -type f -execdir echo 'script-file{}' >> $GITHUB_OUTPUT ';'
#         #run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}'  ';'

#       - name: Upload artifacts
#         uses: actions/upload-artifact@v4
#         with:
#           name: dist-files
#           path: |
#             dist
#             package.json

#   deploy:
#     needs: build
#     runs-on: ubuntu-latest
#     steps:
#       - name: Download artifact
#         uses: actions/download-artifact@v4
#         with:
#           name: dist-files
#           path: dist

#       - name: Output contents
#         run: ls
#       - name: Output filename       # added
#         run: echo "${{ needs.build.outputs.script-file }}"

#       - name: Deploy
#         run: echo "Deploying ... "

# ============================= 19- Using cache  ==========================================		

name: 19- Using cache
on: push

jobs:
  test:
    runs-on: ubuntu-latest
    steps: 
      - name: Get code
        uses: actions/checkout@v3

      - name: Cache dependencies # added
        uses: actions/cache@v3
        with:
            path: ~/.npm
            key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Test code
        run: npm run test

  build:
    needs: test
    runs-on: ubuntu-latest
    outputs:
      script-file: ${{ steps.publish.outputs.script-file }}
    steps:
      - name: Get code
        uses: actions/checkout@v3

      - name: Cache dependencies # added
        uses: actions/cache@v3
        with:
            path: ~/.npm
            key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci

      - name: Build Website
        run: npm run build

      - name: Publish JS filename
        id: publish
        run: echo "script-file=$(find dist/assets/*.js -type f | head -n 1)" >> $GITHUB_OUTPUT
        #run: find dist/assets/*.js -type f -execdir echo 'script-file{}' >> $GITHUB_OUTPUT ';'
        #run: find dist/assets/*.js -type f -execdir echo '::set-output name=script-file::{}'  ';'

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-files
          path: |
            dist
            package.json

  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: dist-files
          path: dist

      - name: Output contents
        run: ls

	  - name: Output filename
        run: ls
      - name: Deploy
        run: echo "Deploying ... "
